
plugins {
    id 'java'
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id 'com.sourcemuse.mongo' version '1.0.7'
}
apply plugin: "io.spring.dependency-management"
group = 'tacs.myretail'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_12
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    all {
    	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}
dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation "org.springframework.boot:spring-boot-starter-webflux"
//	implementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
//	implementation "org.springframework.boot:spring-boot-starter-data-ldap"
//	implementation "com.unboundid:unboundid-ldapsdk"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
//	testImplementation "io.projectreactor:reactor-test"
}
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}
task showProjectValues {
	doLast {
		project.sourceSets.each {println it}
//		println "BuildDir: ${project.buildDir}"
//		project.configurations.each {println it}
		project.properties.each {println it}
	}
}
bootJar {
    exclude("**/dev/")
}
bootRun.dependsOn += startManagedMongoDb
check.dependsOn integrationTest
integrationTest.mustRunAfter test
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}